// Code generated by MockGen. DO NOT EDIT.
// Source: dbrows.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBRows is a mock of DBRows interface.
type MockDBRows struct {
	ctrl     *gomock.Controller
	recorder *MockDBRowsMockRecorder
}

// MockDBRowsMockRecorder is the mock recorder for MockDBRows.
type MockDBRowsMockRecorder struct {
	mock *MockDBRows
}

// NewMockDBRows creates a new mock instance.
func NewMockDBRows(ctrl *gomock.Controller) *MockDBRows {
	mock := &MockDBRows{ctrl: ctrl}
	mock.recorder = &MockDBRowsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBRows) EXPECT() *MockDBRowsMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockDBRows) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockDBRowsMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockDBRows)(nil).Next))
}

// Scan mocks base method.
func (m *MockDBRows) Scan(dest ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockDBRowsMockRecorder) Scan(dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockDBRows)(nil).Scan), dest...)
}
