// Code generated by MockGen. DO NOT EDIT.
// Source: proxysqlnode.go

// Package mock is a generated GoMock package.
package mock

import (
	dataobjects "dataobjects"
	dbwrapper "dbwrapper"
	global "global"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProxySQLNode is a mock of ProxySQLNode interface.
type MockProxySQLNode struct {
	ctrl     *gomock.Controller
	recorder *MockProxySQLNodeMockRecorder
}

// MockProxySQLNodeMockRecorder is the mock recorder for MockProxySQLNode.
type MockProxySQLNodeMockRecorder struct {
	mock *MockProxySQLNode
}

// NewMockProxySQLNode creates a new mock instance.
func NewMockProxySQLNode(ctrl *gomock.Controller) *MockProxySQLNode {
	mock := &MockProxySQLNode{ctrl: ctrl}
	mock.recorder = &MockProxySQLNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxySQLNode) EXPECT() *MockProxySQLNodeMockRecorder {
	return m.recorder
}

// CloseConnection mocks base method.
func (m *MockProxySQLNode) CloseConnection() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseConnection")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CloseConnection indicates an expected call of CloseConnection.
func (mr *MockProxySQLNodeMockRecorder) CloseConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockProxySQLNode)(nil).CloseConnection))
}

// Comment mocks base method.
func (m *MockProxySQLNode) Comment() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Comment")
	ret0, _ := ret[0].(string)
	return ret0
}

// Comment indicates an expected call of Comment.
func (mr *MockProxySQLNodeMockRecorder) Comment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Comment", reflect.TypeOf((*MockProxySQLNode)(nil).Comment))
}

// Connection mocks base method.
func (m *MockProxySQLNode) Connection() dbwrapper.DBConnection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connection")
	ret0, _ := ret[0].(dbwrapper.DBConnection)
	return ret0
}

// Connection indicates an expected call of Connection.
func (mr *MockProxySQLNodeMockRecorder) Connection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connection", reflect.TypeOf((*MockProxySQLNode)(nil).Connection))
}

// Dns mocks base method.
func (m *MockProxySQLNode) Dns() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dns")
	ret0, _ := ret[0].(string)
	return ret0
}

// Dns indicates an expected call of Dns.
func (mr *MockProxySQLNodeMockRecorder) Dns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dns", reflect.TypeOf((*MockProxySQLNode)(nil).Dns))
}

// FetchDataCluster mocks base method.
func (m *MockProxySQLNode) FetchDataCluster(arg0 *global.Configuration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDataCluster", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// FetchDataCluster indicates an expected call of FetchDataCluster.
func (mr *MockProxySQLNodeMockRecorder) FetchDataCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDataCluster", reflect.TypeOf((*MockProxySQLNode)(nil).FetchDataCluster), arg0)
}

// Init mocks base method.
func (m *MockProxySQLNode) Init(arg0 *global.Configuration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockProxySQLNodeMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockProxySQLNode)(nil).Init), arg0)
}

// Ip mocks base method.
func (m *MockProxySQLNode) Ip() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ip")
	ret0, _ := ret[0].(string)
	return ret0
}

// Ip indicates an expected call of Ip.
func (mr *MockProxySQLNodeMockRecorder) Ip() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ip", reflect.TypeOf((*MockProxySQLNode)(nil).Ip))
}

// IsInitialized mocks base method.
func (m *MockProxySQLNode) IsInitialized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInitialized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInitialized indicates an expected call of IsInitialized.
func (mr *MockProxySQLNodeMockRecorder) IsInitialized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInitialized", reflect.TypeOf((*MockProxySQLNode)(nil).IsInitialized))
}

// LastLockTime mocks base method.
func (m *MockProxySQLNode) LastLockTime() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastLockTime")
	ret0, _ := ret[0].(int64)
	return ret0
}

// LastLockTime indicates an expected call of LastLockTime.
func (mr *MockProxySQLNodeMockRecorder) LastLockTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastLockTime", reflect.TypeOf((*MockProxySQLNode)(nil).LastLockTime))
}

// LockExpired mocks base method.
func (m *MockProxySQLNode) LockExpired() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockExpired")
	ret0, _ := ret[0].(bool)
	return ret0
}

// LockExpired indicates an expected call of LockExpired.
func (mr *MockProxySQLNodeMockRecorder) LockExpired() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockExpired", reflect.TypeOf((*MockProxySQLNode)(nil).LockExpired))
}

// MySQLCluster mocks base method.
func (m *MockProxySQLNode) MySQLCluster() *dataobjects.DataCluster {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MySQLCluster")
	ret0, _ := ret[0].(*dataobjects.DataCluster)
	return ret0
}

// MySQLCluster indicates an expected call of MySQLCluster.
func (mr *MockProxySQLNodeMockRecorder) MySQLCluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MySQLCluster", reflect.TypeOf((*MockProxySQLNode)(nil).MySQLCluster))
}

// Port mocks base method.
func (m *MockProxySQLNode) Port() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Port")
	ret0, _ := ret[0].(int)
	return ret0
}

// Port indicates an expected call of Port.
func (mr *MockProxySQLNodeMockRecorder) Port() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Port", reflect.TypeOf((*MockProxySQLNode)(nil).Port))
}

// ProcessChanges mocks base method.
func (m *MockProxySQLNode) ProcessChanges() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessChanges")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ProcessChanges indicates an expected call of ProcessChanges.
func (mr *MockProxySQLNodeMockRecorder) ProcessChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessChanges", reflect.TypeOf((*MockProxySQLNode)(nil).ProcessChanges))
}

// SetActionNodeList mocks base method.
func (m *MockProxySQLNode) SetActionNodeList(arg0 map[string]dataobjects.DataNodePxc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetActionNodeList", arg0)
}

// SetActionNodeList indicates an expected call of SetActionNodeList.
func (mr *MockProxySQLNodeMockRecorder) SetActionNodeList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActionNodeList", reflect.TypeOf((*MockProxySQLNode)(nil).SetActionNodeList), arg0)
}

// SetComment mocks base method.
func (m *MockProxySQLNode) SetComment(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetComment", arg0)
}

// SetComment indicates an expected call of SetComment.
func (mr *MockProxySQLNodeMockRecorder) SetComment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetComment", reflect.TypeOf((*MockProxySQLNode)(nil).SetComment), arg0)
}

// SetHoldLock mocks base method.
func (m *MockProxySQLNode) SetHoldLock(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHoldLock", arg0)
}

// SetHoldLock indicates an expected call of SetHoldLock.
func (mr *MockProxySQLNodeMockRecorder) SetHoldLock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHoldLock", reflect.TypeOf((*MockProxySQLNode)(nil).SetHoldLock), arg0)
}

// SetLastLockTime mocks base method.
func (m *MockProxySQLNode) SetLastLockTime(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLastLockTime", arg0)
}

// SetLastLockTime indicates an expected call of SetLastLockTime.
func (mr *MockProxySQLNodeMockRecorder) SetLastLockTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastLockTime", reflect.TypeOf((*MockProxySQLNode)(nil).SetLastLockTime), arg0)
}

// SetLockExpired mocks base method.
func (m *MockProxySQLNode) SetLockExpired(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLockExpired", arg0)
}

// SetLockExpired indicates an expected call of SetLockExpired.
func (mr *MockProxySQLNodeMockRecorder) SetLockExpired(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLockExpired", reflect.TypeOf((*MockProxySQLNode)(nil).SetLockExpired), arg0)
}
