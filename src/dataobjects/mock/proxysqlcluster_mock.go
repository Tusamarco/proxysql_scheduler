// Code generated by MockGen. DO NOT EDIT.
// Source: proxysqlcluster.go

// Package mock is a generated GoMock package.
package mock

import (
	dataobjects "dataobjects"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProxySQLCluster is a mock of ProxySQLCluster interface.
type MockProxySQLCluster struct {
	ctrl     *gomock.Controller
	recorder *MockProxySQLClusterMockRecorder
}

// MockProxySQLClusterMockRecorder is the mock recorder for MockProxySQLCluster.
type MockProxySQLClusterMockRecorder struct {
	mock *MockProxySQLCluster
}

// NewMockProxySQLCluster creates a new mock instance.
func NewMockProxySQLCluster(ctrl *gomock.Controller) *MockProxySQLCluster {
	mock := &MockProxySQLCluster{ctrl: ctrl}
	mock.recorder = &MockProxySQLClusterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxySQLCluster) EXPECT() *MockProxySQLClusterMockRecorder {
	return m.recorder
}

// FetchProxySQLNodes mocks base method.
func (m *MockProxySQLCluster) FetchProxySQLNodes(arg0 dataobjects.ProxySQLNode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FetchProxySQLNodes", arg0)
}

// FetchProxySQLNodes indicates an expected call of FetchProxySQLNodes.
func (mr *MockProxySQLClusterMockRecorder) FetchProxySQLNodes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProxySQLNodes", reflect.TypeOf((*MockProxySQLCluster)(nil).FetchProxySQLNodes), arg0)
}

// Nodes mocks base method.
func (m *MockProxySQLCluster) Nodes() map[string]dataobjects.ProxySQLNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nodes")
	ret0, _ := ret[0].(map[string]dataobjects.ProxySQLNode)
	return ret0
}

// Nodes indicates an expected call of Nodes.
func (mr *MockProxySQLClusterMockRecorder) Nodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nodes", reflect.TypeOf((*MockProxySQLCluster)(nil).Nodes))
}
